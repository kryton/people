# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
GET         /                                               controllers.HomeController.index
GET         /search                                         controllers.HomeController.search( q:Option[String] ?= None )
GET         /login                                          controllers.HomeController.login
POST        /login                                          controllers.HomeController.loginInSubmit
GET         /logout                                         controllers.HomeController.logout
GET         /logout2                                        controllers.HomeController.logout2

GET         /headshot/:login                                controllers.HeadshotController.headShot(login, notCurrent:Option[String] ?= None)
GET         /headshot/:login/edit                           controllers.HeadshotController.headShotEdit(login)
POST        /headshot/:login/edit                           controllers.HeadshotController.headShotUpdate(login)

GET         /person/                                        controllers.PersonController.search(p: Int ?= 0, search: Option[String] ?= None )
GET         /person/ceo                                     controllers.PersonController.ceo
GET         /person/:login/layer                            controllers.PersonController.layer(login)

GET         /person/autocomplete                            controllers.PersonController.personAutoComplete( q:Option[String] ?= None)
GET         /person/:login                                  controllers.PersonController.id(login:String)
POST        /person/:login/team                             controllers.TeamDescriptionController.setTeam(login:String )
GET         /person/:login/team/delete                      controllers.TeamDescriptionController.deleteTeam(login:String )
GET         /person/:login/prefs                            controllers.UserController.prefs(login:String )
GET         /person/:login/prefs/:id/:enable                controllers.UserController.enabledisable(login:String,id:Long, enable:Boolean )
GET         /person/:login/matrix/:id/:enable               controllers.PersonController.matrixEnabledisable(login:String,id:Long, enable:Boolean )
GET         /person/:login/matrix                           controllers.PersonController.matrix(login:String)
GET         /person/id/:id                                  controllers.PersonController.personNumber(id:Long)
GET         /person/admin/import                            controllers.PersonController.importFile
GET         /person/admin/importWD                          controllers.PersonController.importWorkdayFile()
POST        /person/admin/import                            controllers.PersonController.doImport
POST        /person/admin/importWorkday                     controllers.PersonController.doImportWorkday
GET         /person/admin/importDir                         controllers.PersonController.importFileDir
GET         /person/admin/importFile/:filename              controllers.PersonController.doImportFile(filename:String)



GET         /orgchart/hier                                  controllers.PersonController.personHierarchy(login:Option[String]?=None)
GET         /orgchart/list/:manager                          controllers.PersonController.byManagerList(manager:String, formatO:Option[String]?=None)
GET         /orgchart                                       controllers.PersonController.personOrgChart(login:Option[String]?=None)

GET         /matrix/                                        controllers.MatrixTeamController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /matrix/:id                                     controllers.MatrixTeamController.id( id:Long, p:Int ?= 0 )
GET         /matrix/admin/import                            controllers.MatrixTeamController.importFile
POST        /matrix/admin/import                            controllers.MatrixTeamController.doImport
GET         /agency/                                        controllers.PersonController.agencyList()
GET         /agency/:agency                                 controllers.PersonController.byAgency(agency, p:Int ?= 0)
GET         /office/                                        controllers.OfficeController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /office/:id                                     controllers.OfficeController.id( id:Long, p:Int ?= 0 )
GET         /office/c/:country                              controllers.OfficeController.byCountry( country:String, p:Int ?= 0 )

GET         /cc/                                            controllers.CostCenterController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /cc/cc/:id                                      controllers.CostCenterController.id( id:Long,p:Int ?= 0 )
GET         /cc/function/:id                                controllers.CostCenterController.function( id:Long,p:Int ?= 0 )
GET         /cc/profit/:id                                  controllers.CostCenterController.profit( id:Long,p:Int ?= 0 )
GET         /cc/admin/import                                controllers.CostCenterController.importFile
POST        /cc/admin/import                                controllers.CostCenterController.doImport

GET         /tag/                                           controllers.TagController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /tag/:tag                                       controllers.TagController.id( tag:String, p:Int ?= 0 )

GET         /team/                                          controllers.TeamDescriptionController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /team/:tag                                      controllers.TeamDescriptionController.id( tag:String, p:Int ?= 0 )

# the following are legacy URLs
GET         /kudos/                                         controllers.KudosController.topX( size:Int ?= 30, format: Option[String] = None)
GET         /kudos/auth/:nonce/:cryptString                 controllers.KudosController.authKudos(nonce:String, cryptString: String)
GET         /kudos/genEmail                                 controllers.KudosController.genKudosEmail()
# for debugging only
GET         /kudos/genAuth/:toEncyrpt                       controllers.KudosController.genKudos(toEncyrpt:String)

GET         /shoutout/                                      controllers.KudosController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /shoutout/:id                                   controllers.KudosController.id( id:Long )

GET         /shoutout/admin/auth                            controllers.KudosController.testAuth()
GET         /shoutout/:id/reject                            controllers.KudosController.reject(id:Long, reject: Boolean ?= true )
GET         /award/:login/nominate                          controllers.KudosController.awardNominationForm(login:String )
POST        /award/:login/nominate                          controllers.KudosController.awardNominationSubmit(login:String )
GET         /award/:login/:id/HRApprove                     controllers.KudosController.awardHRApprove(login:String, id:Long)
GET         /award/:login/:id/HRReject                      controllers.KudosController.awardHRReject(login:String, id:Long)
GET         /award/HRApprove                                controllers.KudosController.awardHRApproveList(p:Int ?=0 )
GET         /award/:login/:id/Approve                       controllers.KudosController.awardApprove(login:String, id:Long)
GET         /award/:login/:id/UnApprove                     controllers.KudosController.awardUnApprove(login:String, id:Long)
GET         /award/:login/:id/Reject                        controllers.KudosController.awardReject(login:String, id:Long)
GET         /award/Approve                                  controllers.KudosController.awardApproveList(p:Int ?=0 )


GET         /OKR/                                           controllers.OKRController.topX(size: Int ?= 40, format: Option[String] ?= None)
GET         /OKR/:login                                     controllers.OKRController.login(login:String, quarter:Option[String] ?= None)
GET         /OKR/:login/:id                                 controllers.OKRController.byObjective(login:String, id:Long)
POST        /OKR/:login/:id                                 controllers.OKRController.byObjectiveUPD(login:String, id:Long)
POST        /OKR/:login/:okr/:kr                            controllers.OKRController.byObjectiveKRUPD(login:String, okr:Long, kr:Long)
POST        /OKR/:login/:okr/kr/new                         controllers.OKRController.newKR(login:String, okr:Long)
POST        /OKR/:login/new/obj/                            controllers.OKRController.newObjective(login:String, quarter:Option[String] ?= None )

GET         /OKR/:login/:id/complete                        controllers.OKRController.completeObjective(login:String, id:Long)
GET         /OKR/:login/:id/uncomplete                      controllers.OKRController.unCompleteObjective(login:String, id:Long)
GET         /OKR/:login/:okr/:kr/complete                   controllers.OKRController.completeKR(login:String, okr:Long, kr:Long)
GET         /OKR/:login/:okr/:kr/uncomplete                 controllers.OKRController.unCompleteKR(login:String, okr:Long, kr:Long)
GET         /OKR/:login/:okr/:kr/delete                     controllers.OKRController.deleteKR(login:String, okr:Long, kr:Long)
###
#
# Product URLs
#
GET         /track/                                         controllers.ProductTrackController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /track/:id                                      controllers.ProductTrackController.id( id:Int, p:Int ?= 0)

GET         /feature/                                       controllers.ProductFeatureController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /feature/cid                                    controllers.ProductFeatureController.searchCID(p:Int ?= 0, search: Option[String] ?= None)
GET         /feature/anchor                                 controllers.ProductFeatureController.searchAnchor(p:Int ?= 0, search: Option[String] ?= None)
GET         /feature/:id                                    controllers.ProductFeatureController.id( id:Int, p:Int ?= 0)
POST        /feature/:id/newMC                              controllers.ProductFeatureController.newMCProductFeature(id:Int)
POST        /feature/:id/newFF                              controllers.ProductFeatureController.newProductFeatureFlag(id:Int)
POST        /feature/:id/mc/:mcpf                           controllers.ProductFeatureController.updateMCPF(id:Int,mcpf:Int)
GET         /feature/:id/mc/:mcpf/delete                    controllers.ProductFeatureController.deleteMCPF(id:Int,mcpf:Int)
GET         /feature/:id/updCheck/:checkType/:enable        controllers.ProductFeatureController.updCheck(id:Int, checkType:String, enable:String)
GET         /feature/admin/import                           controllers.ProductFeatureController.importFile
POST        /feature/admin/import                           controllers.ProductFeatureController.doImport
GET         /feature/:id/breakdown                          controllers.ProductFeatureController.doBreakdown(id:Int)

GET         /product/breakdown                              controllers.ProductFeatureController.doFullBreakdown(format:Option[String]?=None)


GET         /stage/                                         controllers.StageController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /stage/:id                                      controllers.StageController.id( id:Int, p:Int ?= 0)


GET         /rteam/                                         controllers.ResourceTeamController.search( p:Int ?= 0, search: Option[String] ?= None)
GET         /rteam/:id                                      controllers.ResourceTeamController.id( id:Int, p:Int ?= 0)
GET         /rteam/:id/breakdown                            controllers.ResourceTeamController.doBreakdown(id:Int)
GET         /rteam/:id/roadmap                              controllers.ResourceTeamController.roadmap(id:Int)
POST        /rteam/:id                                      controllers.ResourceTeamController.updateRT(id:Int)
POST        /rteam/:id/poolUPD                              controllers.ResourceTeamController.updateRTPool(id:Int)

GET         /rpool/                                         controllers.ResourcePoolController.search( p:Int ?= 0, search: Option[String] ?= None)
POST        /rpool/new                                      controllers.ResourcePoolController.newRP
GET         /rpool/breakdown                                controllers.ResourcePoolController.doFullBreakdown(format:Option[String]?=None, teamLevel:Option[String]?=None)
GET         /rpool/rpbreakdown                              controllers.ResourcePoolController.rpBreakdown(format:Option[String]?=None)
GET         /rpool/:id                                      controllers.ResourcePoolController.id( id:Int, p:Int ?= 0)
GET         /rpool/:id/breakdown                            controllers.ResourcePoolController.doBreakdown(id:Int)
GET         /rpool/:id/roadmap                              controllers.ResourcePoolController.roadmap(id:Int)
GET         /rpool/:id/delete                               controllers.ResourcePoolController.deleteRP( id:Int)
POST        /rpool/:id                                      controllers.ResourcePoolController.updateRP( id: Int)

GET         /mclient/                                       controllers.ManagedClientController.search( p:Int ?= 0, search: Option[String] ?= None)
POST        /mclient/new                                    controllers.ManagedClientController.newMC
GET         /mclient/:id                                    controllers.ManagedClientController.id( id:Int, p:Int ?= 0)
GET         /mclient/:id/updCheck/:checkType/:enable        controllers.ManagedClientController.updCheck(id:Int, checkType:String, enable:String)
GET         /mclient/:id/delete                             controllers.ManagedClientController.deleteMC(id:Int)
POST        /mclient/:id                                    controllers.ManagedClientController.updateMC(id:Int)



## Auth URLs
GET         /auth/active/:login                             controllers.AuthController.active(login:String)
GET         /auth/user/:login                               controllers.AuthController.userroles(login:String)
GET         /auth/user/:login/:id/:enable                   controllers.AuthController.enabledisable(login:String,id:Long, enable:Boolean )
GET         /auth/role/                                     controllers.AuthController.roleSearch( p:Int ?= 0, search: Option[String] ?= None)
GET         /auth/role/:id                                  controllers.AuthController.role(id:Long, p:Int ?= 0)
POST        /auth/role/:id/newUSER                          controllers.AuthController.newUserRole(id:Long)
POST        /auth/role/:id/newPERM                          controllers.AuthController.newRolePermission(id:Long)
POST        /auth/role/new                                  controllers.AuthController.newRole
GET         /auth/permission/                               controllers.AuthController.permissionSearch( p:Int ?= 0, search: Option[String] ?= None)
GET         /auth/permission/:id                            controllers.AuthController.permission( id:Long )
POST        /auth/permission/new                            controllers.AuthController.newPermission

## Release URLs
GET         /release/authorization/type/                    controllers.ReleaseController.releaseAuthorizationTypeSearch()
GET         /release/authorization/type/:id                 controllers.ReleaseController.releaseAuthorizationType(id:Int, page:Int ?= 0, page2:Int ?= 0)
POST        /release/authorization/type/new                 controllers.ReleaseController.releaseAuthorizationTypeNew
GET         /release/authorization/type/:id/delete          controllers.ReleaseController.releaseAuthorizationTypeDel(id:Int)
POST        /release/authorization/type/:id                 controllers.ReleaseController.releaseAuthorizationTypeUPD(id:Int)
#
GET         /release/type/                                  controllers.ReleaseController.releaseTypeSearch()
GET         /release/type/:id                               controllers.ReleaseController.releaseType(id:Int, page:Int ?= 0, page2:Int ?= 0)
POST        /release/type/new                               controllers.ReleaseController.releaseTypeNew
GET         /release/type/:id/delete                        controllers.ReleaseController.releaseTypeDel(id:Int)
POST        /release/type/:id                               controllers.ReleaseController.releaseTypeUPD(id:Int)

GET         /release/id/:id                                 controllers.ReleaseController.release(id:Int)
GET         /release/login/:login                           controllers.ReleaseController.login(login:String)
POST        /release/ppl/new                                controllers.ReleaseController.pplNew

# Map static resources from the /public folder to the /assets URL path

GET         /assets/*file                                   controllers.Assets.at(file)
GET         /versionedAssets/*file                          controllers.Assets.versioned(file)
->          /webjars                webjars.Routes

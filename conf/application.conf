# Copyright (C) 2014  Ian Holsman
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# https://www.playframework.com/documentation/latest/Configuration
play {
  # crypto.secret=XXXXXXXX
  http {
   # errorHandler= "ErrorHandler"
    session {
      cookieName = "PLAY_SESSION"
    }
    #secret.key = "lkdssd;kdsp090-s,mcs;"
  }
  assets {
    path = "/public"
    urlPrefix = "/assets"
  }

  filters {
    enabled += play.filters.csrf.CsrfFilter

    headers {
      contentSecurityPolicy = "default-src 'self'; style-src 'self' http://fonts.googleapis.com 'unsafe-inline'; font-src 'self' http://fonts.gstatic.com; script-src 'self' 'nonce-PMAN' 'unsafe-eval'; img-src 'self' data:"
    }
    hosts {
      allowed=[".example.com","localhost"]
    }
    csrf.cookie.name="CSRF_COOKIE"
    cors {
      
    }
  }
  mailer {
    host="mail.example.com"
  #  user (optional)
  #  password (optional)
  #  debug (defaults to no, to take effect you also need to set the log level to "DEBUG" for the application logger)
     mock="yes"
  }
}

slick.dbs {
  default = "models.*"
  default {
    profile = "slick.jdbc.MySQLProfile$"
    db {
      driver = com.mysql.jdbc.Driver
      url = "jdbc:mysql://localhost:3306/offline?rewriteBatchedStatements=true"
      user = root
      password = "password"
    }
  }
  projectdb {
    profile = "slick.jdbc.MySQLProfile$"
    db {
      driver = com.mysql.jdbc.Driver
      url = "jdbc:mysql://localhost:3306/project_db?rewriteBatchedStatements=true"
      user = root
      password = "password"
    }
  }
}


ldap {
  port = 389
  mainDomain = "MPLS"
  servers = [
    {
      domain = "MPLS",
      servers = [
        "ldap.mpls.example.com"
      ],
      OUIgnore = [
        "OU=Service Accounts,OU=Corporate Users,DC=mpls,DC=example,DC=com"
        "OU=Email Only Accounts,OU=Corporate Users,DC=mpls,DC=example,DC=com"
        "OU=Resource Accounts,OU=Corporate Users,DC=mpls,DC=example,DC=com"
        "OU=Test Accounts,OU=Corporate Users,DC=mpls,DC=example,DC=com"
        "CN=Users,DC=mpls,DC=example,DC=com"
        "OU=Terminated Employees,OU=Corporate Users,DC=mpls,DC=example,DC=com"
      ]
      dn = "DC=mpls,DC=example,DC=com",
      user = "MPLS\\example",
      pass = "LDAPPASSWORD"
      terminatedGroup = "Terminated Employees"
    },
  ]
}
auth.enable = false
#smtp.host = smtp.example.com

scenario {
  admins = ["iholsman","oryaboy"]
  # head of HR goes here
  admins_hierarchy = [ "jaolson"]
  tempdir = "/tmp"
}

offline {
  offshoreCountries = ["IN", "AR", "PH"]
  speciallogo=["iholsman"]
  cats=["iholsman"]
  SAPImportDir="C:\\pic\\xfer\\Prod"
}

image {
  directory = "/pic/source"
  cache = "/pic/cache"
  user = "/pic/user-upload"
  catPercentage = 0.10 # 10%
}

kudos {
  hostname = "https://people.example.com"
  returnURL = "/"
  emailDomain = example.com
  admins = ["iholsman"]
  emailRecipient = true
  secret = "putSomethingInHere****"
}

aceaward {
  hostname = "https://people.example.com"
  returnURL = "http://example.com"
  emailDomain = example.com
  admins = ["iholsman","xxxx","xxxxy","xxxzxxx"]
  emailRecipient = true
}

include "secret.conf"
